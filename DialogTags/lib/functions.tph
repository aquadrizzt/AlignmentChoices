//--------------------------
// Automates detection and addition of alignment effects to dialog options
// With extensive code borrowing from Argent77
//--------------------------
DEFINE_PATCH_FUNCTION ADD_DLG_ATTRIBUTE_INFO
  INT_VAR
    level = 0 // 0: vague, 1: informative, 2: precise
  BEGIN
    READ_LONG 0x24 num_triggers

    PATCH_IF (num_triggers > 0) BEGIN
      READ_LONG 0x10 num_trans
      READ_LONG 0x14 ofs_trans
      READ_LONG 0x20 ofs_triggers

      // Checks and initializations

      PATCH_IF (level < 0) BEGIN
        SET level = 0
      END ELSE PATCH_IF (level > 2) BEGIN
        SET level = 2
      END
      SET strref_base = 2000 + (level * 100)

      // Comparison symbols
      PATCH_IF (level = 2) BEGIN
        // ...for precise display
        DEFINE_ASSOCIATIVE_ARRAY comparison BEGIN
          ~0~ => ~-~
          ~1~ => ~+~
        END
      END ELSE BEGIN
        // ...for informative display
        DEFINE_ASSOCIATIVE_ARRAY comparison BEGIN
          ~0~ => ~-~
          ~1~ => ~+~
        END
      END

      // Map of "variable name => stat symbol" entries
      DEFINE_ASSOCIATIVE_ARRAY stats_map BEGIN
        // attributes...
        ~strength~      => ~STR~
        ~dexterity~     => ~DEX~
        ~constitution~  => ~CON~
        ~intelligence~  => ~INT~
        ~wisdom~        => ~WIS~
        ~charisma~      => ~CHR~
        // ...or skills...
        ~stealth~       => ~STEALTH~
        ~lockpicking~   => ~LOCKPICKING~
        ~pickpockets~   => ~PICKPOCKET~
        ~traps~         => ~TRAPS~
        // ... or fire res
        ~fire_res~      => ~RESISTFIRE~
      END

      // Map of "variable name => strref offset" entries
      DEFINE_ASSOCIATIVE_ARRAY strref_map BEGIN
        ~strength~      => 1
        ~dexterity~     => 2
        ~constitution~  => 3
        ~intelligence~  => 4
        ~wisdom~        => 5
        ~charisma~      => 6
        ~stealth~       => 7
        ~lockpicking~   => 8
        ~pickpockets~   => 9
        ~traps~         => 10
        ~fire_res~      => 11
      END

      //iterate over all transitions
      FOR (i=0; i < num_trans; ++i) BEGIN
        READ_LONG (ofs_trans + i*0x20) flags
        PATCH_IF ((flags & (BIT0 | BIT1)) = (BIT0 | BIT1)) BEGIN
          READ_LONG (ofs_trans + i*0x20 + 0xc) trigger_idx

          PATCH_IF (trigger_idx >= 0 && trigger_idx < num_triggers) BEGIN
            READ_LONG (ofs_triggers + trigger_idx*0x8) trigger_i_offset
            READ_LONG (ofs_triggers + trigger_idx*0x8 + 0x4) trigger_i_length
            READ_ASCII trigger_i_offset trigger_i (trigger_i_length)

            // find any triggers that check protagonist stats, skils or fire resistance
            PATCH_PHP_EACH stats_map AS name => _ BEGIN
              SET EVAL ~%name%~ = 0
            END

            INNER_PATCH ~%trigger_i%~ BEGIN

              //minimum stat
              REPLACE_EVALUATE CASE_INSENSITIVE
                ~\(!?\)CheckStatGT(Protagonist,\([1-9][0-9]*\),\([A-Za-z]*\))~
                BEGIN
                  SET isNeg = ~%MATCH1%~ STR_EQ ~!~
                  PATCH_IF (IS_AN_INT ~%MATCH2%~) BEGIN
                    PATCH_PHP_EACH stats_map AS name => symbol BEGIN
                      PATCH_IF (~%MATCH3%~ STR_EQ ~%symbol%~) BEGIN
                        SET EVAL ~%name%~ = isNeg ? (0 - MATCH2 - 1) : MATCH2
                      END
                    END
                  END
                END
              ~~

              REPLACE_EVALUATE CASE_INSENSITIVE
                ~\(!?\)CheckStatLT(Protagonist,\([1-9][0-9]*\),\([A-Za-z]*\))~
                BEGIN
                  SET isNeg = ~%MATCH1%~ STR_EQ ~!~
                  PATCH_IF (IS_AN_INT ~%MATCH2%~) BEGIN
                    PATCH_PHP_EACH stats_map AS name => symbol BEGIN
                      PATCH_IF (~%MATCH3%~ STR_EQ ~%symbol%~) BEGIN
                        SET EVAL ~%name%~ = isNeg ? (MATCH2 + 1) : (0 - MATCH2)
                      END
                    END
                  END
                END
                ~~
            END

            // collect attributes in array since triggers may contain multiple attribute checks
            SET attributes = 0
            PATCH_PHP_EACH strref_map AS name => strref_ofs BEGIN
              SET value = EVAL ~%name%~
              PATCH_IF (value != 0) BEGIN
                SET idx = (value > 0)
                TEXT_SPRINT cmp $comparison(~%idx%~)
                SET value = ABS value
                SET EVAL ~%name%~ = value
                SET strref = strref_base + strref_ofs
                SPRINT s (AT ~strref~)
                TEXT_SPRINT $attributes(~%attributes%~) ~%s%~
                SET attributes += 1
              END
            END

            // assemble attribute string from array items
            SPRINT attribute_string ~~
            FOR (j = 0; j < attributes; ++j) BEGIN
              PATCH_IF (j = 0) BEGIN
                TEXT_SPRINT attribute_string $attributes(~%j%~)
              END ELSE BEGIN
                TEXT_SPRINT s $attributes(~%j%~)
                TEXT_SPRINT attribute_string ~%attribute_string%, %s%~
              END
            END

            PATCH_IF (NOT ~%attribute_string%~ STR_EQ ~~) BEGIN
              READ_STRREF (ofs_trans + i*0x20 + 0x4) original_string
              SAY_EVALUATED (ofs_trans + i*0x20 + 0x4) ~(%attribute_string%) %original_string%~
            END
          END
        END
      END
    END
  END


//--------------------------
// Automates detection and addition of alignment effects to dialog options
// Courtesy of Argent77
//--------------------------
DEFINE_PATCH_FUNCTION ADD_DLG_ALIGNMENT_INFO
INT_VAR
  level = 1 // 0: vague, 1: informative, 2: precise
BEGIN
  READ_LONG 0x2c num_actions

  PATCH_IF (num_actions > 0) BEGIN
    READ_LONG 0x10 num_trans
    READ_LONG 0x14 ofs_trans
    READ_LONG 0x28 ofs_actions

    PATCH_IF (level < 0) BEGIN
      SET level = 0
    END ELSE PATCH_IF (level > 2) BEGIN
      SET level = 2
    END
    SET strref_base = 1000 + (level * 100)

    // iterate over all transitions
    FOR (i = 0; i < num_trans; ++i) BEGIN
      READ_LONG (ofs_trans + i*0x20) flags

      // has transition text and associated action?
      PATCH_IF ((flags & (BIT0 | BIT2)) = (BIT0 | BIT2)) BEGIN
        READ_LONG (ofs_trans + i*0x20 + 0x10) action_idx

        PATCH_IF (action_idx >= 0 && action_idx < num_actions) BEGIN
          READ_LONG (ofs_actions + action_idx*0x8) action_i_offset
          READ_LONG (ofs_actions + action_idx*0x8 + 0x4) action_i_length
          READ_ASCII action_i_offset action_i (action_i_length)

          // find any actions that update alignment globals: count ethical and moral independently
          SET ETHICAL = 0
          SET MORAL = 0
          INNER_PATCH ~%action_i%~ BEGIN
            REPLACE_EVALUATE CASE_INSENSITIVE
              ~IncrementGlobal("Law","GLOBAL",\(-?[1-9][0-9]*\))~
              BEGIN
                PATCH_IF (IS_AN_INT ~MATCH1~) BEGIN
                  SET ETHICAL += MATCH1
                END
              END
              ~~
            REPLACE_EVALUATE CASE_INSENSITIVE
              ~IncrementGlobalOnceEx("[^"]*","GLOBALLaw",\(-?[1-9][0-9]*\))~
              BEGIN
                PATCH_IF (IS_AN_INT ~MATCH1~) BEGIN
                  SET ETHICAL += MATCH1
                END
              END
              ~~
            REPLACE_EVALUATE CASE_INSENSITIVE
              ~IncrementGlobal("Good","GLOBAL",\(-?[1-9][0-9]*\))~
              BEGIN
                PATCH_IF (IS_AN_INT ~MATCH1~) BEGIN
                  SET MORAL += MATCH1
                END
              END
              ~~
            REPLACE_EVALUATE CASE_INSENSITIVE
              ~IncrementGlobalOnceEx("[^"]*","GLOBALGood",\(-?[1-9][0-9]*\))~
              BEGIN
                PATCH_IF (IS_AN_INT ~MATCH1~) BEGIN
                  SET MORAL += MATCH1
                END
              END
              ~~
          END

          // evaluate results
          SET lawful = (ETHICAL > 0) << 0
          SET chaotic =  (ETHICAL < 0) << 1
          SET good = (MORAL > 0) << 2
          SET evil = (MORAL < 0) << 3
          SET ETHICAL = ABS ETHICAL
          SET MORAL = ABS MORAL

          PATCH_MATCH (lawful | chaotic | good | evil) WITH
            // Lawful
            BIT0 BEGIN
              SET strref = strref_base + 1
              SPRINT alignment_string (AT ~strref~)
            END
            // Chaotic
            BIT1 BEGIN
              SET strref = strref_base + 2
              SPRINT alignment_string (AT ~strref~)
            END
            // Good
            BIT2 BEGIN
              SET strref = strref_base + 3
              SPRINT alignment_string (AT ~strref~)
            END
            // Evil
            BIT3 BEGIN
              SET strref = strref_base + 4
              SPRINT alignment_string (AT ~strref~)
            END
            // Lawful Good
            (BIT0 | BIT2) BEGIN
              SET strref = strref_base + 5
              SPRINT alignment_string (AT ~strref~)
            END
            // Lawful Evil
            (BIT0 | BIT3) BEGIN
              SET strref = strref_base + 6
              SPRINT alignment_string (AT ~strref~)
            END
            // Chaotic Good
            (BIT1 | BIT2) BEGIN
              SET strref = strref_base + 7
              SPRINT alignment_string (AT ~strref~)
            END
            // Chaotic Evil
            (BIT1 | BIT3) BEGIN
              SET strref = strref_base + 8
              SPRINT alignment_string (AT ~strref~)
            END
            // No alignment modification
            DEFAULT SPRINT alignment_string ~~
          END

          PATCH_IF (NOT ~%alignment_string%~ STR_EQ ~~) BEGIN
            READ_STRREF (ofs_trans + i*0x20 + 0x4) original_string
            SAY_EVALUATED (ofs_trans + i*0x20 + 0x4) ~%alignment_string% %original_string%~
          END
        END
      END
    END

  END
END
