//--------------------------
// Automates detection and addition of alignment effects to dialog options
// With extensive code borrowing from Argent77
//--------------------------
DEFINE_PATCH_FUNCTION ADD_DLG_ATTRIBUTE_INFO 
  INT_VAR 
    level = 0 // 0: informative, 1: precise
  BEGIN 
    READ_LONG 0x24 num_triggers

    PATCH_IF (num_triggers > 0) BEGIN
      READ_LONG 0x10 num_trans
      READ_LONG 0x14 ofs_trans
      READ_LONG 0x20 ofs_triggers

      PATCH_IF (level < 0) BEGIN
        SET level = 0
      END ELSE PATCH_IF (level > 1) BEGIN
        SET level = 1
      END
      SET strref_base = 2000 + (level * 100)

      //iterate over all transitions
      FOR (i=0; i < num_trans; ++i) BEGIN 
        READ_LONG (ofs_trans + i*0x20) flags 
        PATCH_IF ((flags & (BIT0 | BIT1)) = (BIT0 | BIT1)) BEGIN
          READ_LONG (ofs_trans + i*0x20 + 0xc) trigger_idx

          PATCH_IF (trigger_idx >= 0 && trigger_idx < num_triggers) BEGIN
            READ_LONG (ofs_triggers + trigger_idx*0x8) trigger_i_offset
            READ_LONG (ofs_triggers + trigger_idx*0x8 + 0x4) trigger_i_length
            READ_ASCII trigger_i_offset trigger_i (trigger_i_length)

            // find any triggers that check protagonist attributes...
            SET strength = 0
            SET dexterity = 0
            SET constitution = 0
            SET intelligence = 0
            SET wisdom = 0
            SET charisma = 0

            // or skills... 
            SET stealth = 0 
            SET lockpicking = 0 
            SET traps = 0
            SET pickpockets = 0

            // ... or fire res
            SET fire_res = 0 

            INNER_PATCH ~%trigger_i%~ BEGIN

              //minimum stat
              REPLACE_EVALUATE CASE_INSENSITIVE
                ~CheckStatGT(Protagonist,\([1-9][0-9]*\),\([A-Za-z]*\))~
                BEGIN
                  PATCH_IF (IS_AN_INT ~%MATCH1%~) BEGIN 
                    PATCH_IF (~%MATCH2%~ STR_EQ ~STR~) BEGIN 
                      SET strength = MATCH1 + 1
                    END 
                    PATCH_IF (~%MATCH2%~ STR_EQ ~DEX~) BEGIN 
                      SET dexterity = MATCH1 + 1
                    END 
                    PATCH_IF (~%MATCH2%~ STR_EQ ~CON~) BEGIN 
                      SET constitution = MATCH1 + 1
                    END 
                    PATCH_IF (~%MATCH2%~ STR_EQ ~INT~) BEGIN 
                      SET intelligence = MATCH1 + 1
                    END 
                    PATCH_IF (~%MATCH2%~ STR_EQ ~WIS~) BEGIN 
                      SET wisdom = MATCH1 + 1
                    END 
                    PATCH_IF (~%MATCH2%~ STR_EQ ~CHR~) BEGIN 
                      SET charisma = MATCH1 + 1
                    END 
                    PATCH_IF (~%MATCH2%~ STR_EQ ~STEALTH~) BEGIN 
                      SET stealth = MATCH1 + 1
                    END 
                    PATCH_IF (~%MATCH2%~ STR_EQ ~LOCKPICKING~) BEGIN 
                      SET lockpicking = MATCH1 + 1
                    END 
                    PATCH_IF (~%MATCH2%~ STR_EQ ~PICKPOCKET~) BEGIN 
                      SET pickpockets = MATCH1 + 1
                    END 
                    PATCH_IF (~%MATCH2%~ STR_EQ ~TRAPS~) BEGIN 
                      SET traps = MATCH1 + 1
                    END 
                    PATCH_IF (~%MATCH2%~ STR_EQ ~RESISTFIRE~) BEGIN 
                      SET fire_res = MATCH1 + 1
                    END 
                  END 
                END
              ~~
            END 

            SPRINT attribute_string ~~

            PATCH_IF (strength > 0) BEGIN 
              SET strref = strref_base + 1
              SPRINT attribute_string (AT ~strref~)
            END
            PATCH_IF (dexterity > 0) BEGIN 
              SET strref = strref_base + 2
              SPRINT attribute_string (AT ~strref~)
            END 
            PATCH_IF (constitution > 0) BEGIN 
              SET strref = strref_base + 3
              SPRINT attribute_string (AT ~strref~)
            END 
            PATCH_IF (intelligence > 0) BEGIN 
              SET strref = strref_base + 4
              SPRINT attribute_string (AT ~strref~)
            END 
            PATCH_IF (wisdom > 0) BEGIN 
              SET strref = strref_base + 5
              SPRINT attribute_string (AT ~strref~)
            END 
            PATCH_IF (charisma > 0) BEGIN 
              SET strref = strref_base + 6
              SPRINT attribute_string (AT ~strref~)
            END 
            PATCH_IF (stealth > 0) BEGIN 
              SET strref = strref_base + 7
              SPRINT attribute_string (AT ~strref~)
            END 
            PATCH_IF (lockpicking > 0) BEGIN 
              SET strref = strref_base + 8
              SPRINT attribute_string (AT ~strref~)
            END 
            PATCH_IF (traps > 0) BEGIN 
              SET strref = strref_base + 9
              SPRINT attribute_string (AT ~strref~)
            END 
            PATCH_IF (pickpockets > 0) BEGIN 
              SET strref = strref_base + 10
              SPRINT attribute_string (AT ~strref~)
            END 
            PATCH_IF (fire_res > 0) BEGIN 
              SET strref = strref_base + 11
              SPRINT attribute_string (AT ~strref~)
            END 

            PATCH_IF (NOT ~%attribute_string%~ STR_EQ ~~) BEGIN
              READ_STRREF (ofs_trans + i*0x20 + 0x4) original_string
              SAY_EVALUATED (ofs_trans + i*0x20 + 0x4) ~%attribute_string% %original_string%~
            END
          END   
        END 
      END 
    END 
  END 
 

//--------------------------
// Automates detection and addition of alignment effects to dialog options
// Courtesy of Argent77
//--------------------------
DEFINE_PATCH_FUNCTION ADD_DLG_ALIGNMENT_INFO
INT_VAR
  level = 1 // 0: vague, 1: informative, 2: precise
BEGIN
	READ_LONG 0x2c num_actions

	PATCH_IF (num_actions > 0) BEGIN
    READ_LONG 0x10 num_trans
    READ_LONG 0x14 ofs_trans
    READ_LONG 0x28 ofs_actions

    PATCH_IF (level < 0) BEGIN
      SET level = 0
    END ELSE PATCH_IF (level > 2) BEGIN
      SET level = 2
    END
    SET strref_base = 1000 + (level * 100)

		// iterate over all transitions
    FOR (i = 0; i < num_trans; ++i) BEGIN
      READ_LONG (ofs_trans + i*0x20) flags

      // has transition text and associated action?
      PATCH_IF ((flags & (BIT0 | BIT2)) = (BIT0 | BIT2)) BEGIN
        READ_LONG (ofs_trans + i*0x20 + 0x10) action_idx

        PATCH_IF (action_idx >= 0 && action_idx < num_actions) BEGIN
          READ_LONG (ofs_actions + action_idx*0x8) action_i_offset
          READ_LONG (ofs_actions + action_idx*0x8 + 0x4) action_i_length
          READ_ASCII action_i_offset action_i (action_i_length)

          // find any actions that update alignment globals: count ethical and moral independently
          SET ETHICAL = 0
          SET MORAL = 0
          INNER_PATCH ~%action_i%~ BEGIN
            REPLACE_EVALUATE CASE_INSENSITIVE
              ~IncrementGlobal("Law","GLOBAL",\(-?[1-9][0-9]*\))~
              BEGIN
                PATCH_IF (IS_AN_INT ~MATCH1~) BEGIN
                  SET ETHICAL += MATCH1
                END
              END
              ~~
            REPLACE_EVALUATE CASE_INSENSITIVE
              ~IncrementGlobalOnceEx("[^"]*","GLOBALLaw",\(-?[1-9][0-9]*\))~
              BEGIN
                PATCH_IF (IS_AN_INT ~MATCH1~) BEGIN
                  SET ETHICAL += MATCH1
                END
              END
              ~~
            REPLACE_EVALUATE CASE_INSENSITIVE
              ~IncrementGlobal("Good","GLOBAL",\(-?[1-9][0-9]*\))~
              BEGIN
                PATCH_IF (IS_AN_INT ~MATCH1~) BEGIN
                  SET MORAL += MATCH1
                END
              END
              ~~
            REPLACE_EVALUATE CASE_INSENSITIVE
              ~IncrementGlobalOnceEx("[^"]*","GLOBALGood",\(-?[1-9][0-9]*\))~
              BEGIN
                PATCH_IF (IS_AN_INT ~MATCH1~) BEGIN
                  SET MORAL += MATCH1
                END
              END
              ~~
          END

          // evaluate results
          SET lawful = (ETHICAL > 0) << 0
          SET chaotic =  (ETHICAL < 0) << 1
          SET good = (MORAL > 0) << 2
          SET evil = (MORAL < 0) << 3
          PATCH_IF (ETHICAL < 0) BEGIN SET ETHICAL = 0 - ETHICAL END
          PATCH_IF (MORAL < 0) BEGIN SET MORAL = 0 - MORAL END

          PATCH_MATCH (lawful | chaotic | good | evil) WITH
            // Lawful
            BIT0 BEGIN
              SET strref = strref_base + 1
              SPRINT alignment_string (AT ~strref~)
            END
            // Chaotic
            BIT1 BEGIN
              SET strref = strref_base + 2
              SPRINT alignment_string (AT ~strref~)
            END
            // Good
            BIT2 BEGIN
              SET strref = strref_base + 3
              SPRINT alignment_string (AT ~strref~)
            END
            // Evil
            BIT3 BEGIN
              SET strref = strref_base + 4
              SPRINT alignment_string (AT ~strref~)
            END
            // Lawful Good
            (BIT0 | BIT2) BEGIN
              SET strref = strref_base + 5
              SPRINT alignment_string (AT ~strref~)
            END
            // Lawful Evil
            (BIT0 | BIT3) BEGIN
              SET strref = strref_base + 6
              SPRINT alignment_string (AT ~strref~)
            END
            // Chaotic Good
            (BIT1 | BIT2) BEGIN
              SET strref = strref_base + 7
              SPRINT alignment_string (AT ~strref~)
            END
            // Chaotic Evil
            (BIT1 | BIT3) BEGIN
              SET strref = strref_base + 8
              SPRINT alignment_string (AT ~strref~)
            END
            // No alignment modification
            DEFAULT SPRINT alignment_string ~~
          END

          PATCH_IF (NOT ~%alignment_string%~ STR_EQ ~~) BEGIN
            READ_STRREF (ofs_trans + i*0x20 + 0x4) original_string
            SAY_EVALUATED (ofs_trans + i*0x20 + 0x4) ~%alignment_string% %original_string%~
          END
        END
      END
    END

	END 
END
